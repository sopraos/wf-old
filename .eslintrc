{
	"parser": "babel-eslint",
	"env": {
		"browser": true,
		"node": true
	},
	"rules": {
		"no-cond-assign": "error",	// disallow assignment in conditional expressions
		"no-console": 0,	// disallow use of console (off by default in the node environment)
		"no-constant-condition": "error",	// disallow use of constant expressions in conditions
		"no-control-regex": 0,	// disallow control characters in regular expressions
		"no-debugger": 0,	// disallow use of debugger
		"no-dupe-keys": "error",	// disallow duplicate keys when creating object literals
		"no-empty": 0,	// disallow empty statements
		"no-ex-assign": "error",	// disallow assigning to the exception in a catch block
		"no-extra-boolean-cast": "error",	// disallow double-negation boolean casts in a boolean context
    "no-extra-parens": "error",	// disallow unnecessary parentheses (off by default)
    "no-extra-semi": "error",	// disallow unnecessary semicolons
		"no-func-assign": "error",	// disallow overwriting functions written as function declarations
		"no-inner-declarations": 0,	// disallow function or variable declarations in nested blocks
		"no-invalid-regexp": "error",	// disallow invalid regular expression strings in the RegExp constructor
		"no-irregular-whitespace": "error",	// disallow irregular whitespace outside of strings and comments
		"no-negated-in-lhs": "error",	// disallow negation of the left operand of an in expression
		"no-obj-calls": "error",	// disallow the use of object properties of the global object (Math and JSON) as functions
		"no-regex-spaces": 0,	// disallow multiple spaces in a regular expression literal
		"no-sparse-arrays": "error",	// disallow sparse arrays
		"no-unreachable": "error",	// disallow unreachable statements after a return, throw, continue, or break statement
		"use-isnan": "error",	// disallow comparisons with the value NaN
    "valid-jsdoc": 0,	// Ensure JSDoc comments are valid (off by default)
    "valid-typeof": "error",	// Ensure that the results of typeof are compared against a valid string
		"block-scoped-var": "error",	// treat var statements as if they were block scoped (off by default)
		"complexity": ["error", 6],	// specify the maximum cyclomatic complexity allowed in a program (off by default)
		"consistent-return": 0,	// require return statements to either always or never specify values
		"curly": ["error", "all"],	// specify curly brace conventions for all control statements
		"default-case": 0,	// require default case in switch statements (off by default)
		"dot-notation": ["error", {"allowPattern": "^[a-z]+(_[a-z]+)+$"}],	// encourages use of dot notation whenever possible
		"eqeqeq": "error",	// require the use of === and !==
		"guard-for-in": 0,	// make sure for-in loops have an if statement (off by default)
		"no-alert": 1,	// disallow the use of alert, confirm, and prompt
		"no-caller": 0,	// disallow use of arguments.caller or arguments.callee
		"no-div-regex": "error",	// disallow division operators explicitly at beginning of regular expression (off by default)
		"no-else-return": 0,	// disallow else after a return in an if (off by default)
		"no-eq-null": "error",	// disallow comparisons to null without a type-checking operator (off by default)
		"no-extend-native": 0,	// disallow adding to native types
		"no-extra-bind": "error",	// disallow unnecessary function binding
		"no-fallthrough": "error",	// disallow fallthrough of case statements
		"no-floating-decimal": "error",	// disallow the use of leading or trailing decimal points in numeric literals (off by default)
		"no-implied-eval": "error",	// disallow use of eval()-like methods
		"no-iterator": 0,	// disallow usage of __iterator__ property
		"no-labels": "error",	// disallow use of labeled statements
		"no-lone-blocks": "error",	// disallow unnecessary nested blocks
		"no-loop-func": 0,	// disallow creation of functions within loops
		"no-multi-spaces": "error",	// disallow use of multiple spaces
		"no-multi-str": 0,	// disallow use of multiline strings
		"no-native-reassign": "error",	// disallow reassignments of native objects
		"no-new": "error",	// disallow use of new operator when not part of the assignment or comparison
    "strict": 0,
    "no-catch-shadow": "error",	// disallow the catch clause parameter name being the same as a variable in the outer scope (off by default in the node environment)
    "no-delete-var": "error",	// disallow deletion of variables
    "no-label-var": "error",	// disallow labels that share a name with a variable
    "no-shadow": "error",	// disallow declaration of variables already declared in the outer scope
    "no-shadow-restricted-names": "error",	// disallow shadowing of names such as arguments
    "no-undef": "error",	// disallow use of undeclared variables unless mentioned in a /*global */ block
    "no-undef-init": "error",	// disallow use of undefined when initializing variables
    "no-undefined": 0,	// disallow use of undefined variable (off by default)
    "no-unused-vars": "error",	// disallow declaration of variables that are not used in the code
    "no-use-before-define": "error",	// disallow use of variables before they are defined
    "brace-style": ["error", "1tbs", { "allowSingleLine": false }],	// enforce one true brace style (off by default)
    "camelcase": ["error", {"properties": "never"}],	// require camel case names
    "comma-spacing": ["error", {"before": false, "after": true}],	// enforce spacing before and after comma
    "comma-style": ["error", "last"],	// enforce one true comma style (off by default)
    "consistent-this": ["error", "that"],	// enforces consistent naming when capturing the current execution context (off by default)
    "eol-last": "error",	// enforce newline at the end of file, with no multiple empty lines
    "func-names": 0,	// require function expressions to have a name (off by default)
    "func-style": 0,	// enforces use of function declarations or expressions (off by default)
    "key-spacing": ["error", {"beforeColon": false, "afterColon": true, "mode": "minimum"}],	// enforces spacing between keys and values in object literal properties
    "max-nested-callbacks": 0,	// specify the maximum depth callbacks can be nested (off by default)
    "new-cap": "error",	// require a capital letter for constructors
    "new-parens": "error",	// disallow the omission of parentheses when invoking a constructor with no arguments
    "no-array-constructor": 0,	// disallow use of the Array constructor
    "no-inline-comments": 0,	// disallow comments inline after code (off by default)
    "no-lonely-if": 0,	// disallow if as the only statement in an else block (off by default)
    "no-mixed-spaces-and-tabs": "error",	// disallow mixed spaces and tabs for indentation
    "no-multiple-empty-lines": ["error", { "max": 1, "maxEOF": 0 }],	// disallow multiple empty lines (off by default)
    "no-nested-ternary": 0,	// disallow nested ternary expressions (off by default)
    "no-new-object": "error",	// disallow use of the Object constructor
    "no-spaced-func": 0,	// disallow space between function identifier and application
    "no-ternary": 0,	// disallow the use of ternary operators (off by default)
    "no-trailing-spaces": "error",	// disallow trailing whitespace at the end of lines
    "no-underscore-dangle": 0,	// disallow dangling underscores in identifiers
    "one-var": ["error", "never"],	// allow just one var statement per function (off by default)
    "operator-assignment": ["error", "always"],	// require assignment operator shorthand where possible or prohibit it entirely (off by default)
    "padded-blocks": 0,	// enforce padding within blocks (off by default)
    "quote-props": ["error", "as-needed"],	// require quotes around object literal property names (off by default)
    "quotes": ["error", "single"],	// specify whether double or single quotes should be used
    "semi": ["error", "always"],	// require or disallow use of semicolons instead of ASI
    "sort-vars": 0,	// sort variables within the same declaration block (off by default)
    "space-before-blocks": "error",	// require or disallow space before blocks (off by default)
    "space-in-parens": ["error", "never"],	// require or disallow spaces inside parentheses (off by default)
    "space-infix-ops": "error",	// require spaces around operators
    "space-unary-ops": "error",	// Require or disallow spaces before/after unary operators (words on by default, nonwords off by default)
    "spaced-comment": ["error", "always"],	// Requires or disallows a whitespace (space or tab) beginning a comment (spaced-comment)
    "wrap-regex": 0,	// require regex literals to be wrapped in parentheses (off by default)
    "max-depth": 0,	// specify the maximum depth that blocks can be nested (off by default)
    "max-len": ["error", 110, 2],	// specify the maximum length of a line in your program (off by default)
		"max-params": 0,	// limits the number of parameters that can be used in the function declaration. (off by default)
    "max-statements": 0,	// specify the maximum number of statement allowed in a function (off by default)
    "no-bitwise": "error",	// disallow use of bitwise operators (off by default)
    "no-plusplus": 0,	// disallow use of unary operators, ++ and -- (off by default)
		"object-curly-spacing": ["error", "always"],	// enforce consistent spacing inside braces(object-curly-spacing)
		"space-before-function-paren": 0,	//Require or disallow a space before function parenthesis (space-before-function-paren)
		"keyword-spacing": "error",	// enforce consistent spacing before and after keywords (keyword-spacing)
		"comma-dangle": ["error", "never"],	// require or disallow trailing commas (comma-dangle)
		"no-param-reassign": 1,	// Disallow Reassignment of Function Parameters (no-param-reassign)
    "indent": ["error", "tab"]	// enforce consistent indentation (indent)
	}
}